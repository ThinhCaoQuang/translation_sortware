import flet as ft
import time
import threading
from docx import Document
from api import translate_text, LANGUAGES, CONTEXTS
from text_to_speech import speak, stop_speaking, is_speaking
from speech_to_text import transcribe_audio, start_recording
from languages import LANGUAGES
from history import init_db, add_history, get_history

# Pre-import OCR dependencies ƒë·ªÉ tr√°nh delay l·∫ßn ƒë·∫ßu
try:
    from PIL import Image
    import pytesseract
    import os
    PIL_AVAILABLE = True
    
    # Cache Tesseract path ngay t·ª´ ƒë·∫ßu
    TESSERACT_CMD = None
    tesseract_paths = [
        r"C:\Program Files\Tesseract-OCR\tesseract.exe",
        r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
        r"C:\tesseract\tesseract.exe",
    ]
    for path in tesseract_paths:
        if os.path.exists(path):
            TESSERACT_CMD = path
            pytesseract.pytesseract.tesseract_cmd = path
            break
except ImportError:
    PIL_AVAILABLE = False


def _lang_code(display: str) -> str:
    """Chuy·ªÉn ƒë·ªïi t√™n hi·ªÉn th·ªã th√†nh m√£ ng√¥n ng·ªØ"""
    return LANGUAGES.get(display, "auto")
    
T·∫°o l·ªõp kh·ªüi t·∫°o ph·∫ßn m·ªÅm
class AppState:
    """Class ƒë·ªÉ l∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa ·ª©ng d·ª•ng"""
    def __init__(self):
        self.realtime_enabled = True  # B·∫≠t m·∫∑c ƒë·ªãnh
        self.typing_timer = None
        self.translation_cache = {}
        self.recording = False
        self.speaking = False
        self.realtime_translating = False
        self.recording_thread = None
        self.last_audio_data = None  # L∆∞u audio data ƒë·ªÉ x·ª≠ l√Ω sau khi d·ª´ng
        self.force_stop_recording = False  # Flag ƒë·ªÉ d·ª´ng recording ngay l·∫≠p t·ª©c
        
class ThemeHandler:
    """X·ª≠ l√Ω ch·∫ø ƒë·ªô theme v√† m√†u s·∫Øc"""
    
    @staticmethod
    def get_page_bgcolor(page):
        return ft.Colors.GREY_50 if page.theme_mode == "light" else ft.Colors.GREY_900
    
    @staticmethod
    def get_snackbar_colors(page):
        if page.theme_mode == "light":
            return {
                "content_color": ft.Colors.BLACK87,
                "bgcolor": ft.Colors.with_opacity(0.9, ft.Colors.BLUE_GREY_100)
            }
        else:
            return {
                "content_color": ft.Colors.WHITE,
                "bgcolor": ft.Colors.with_opacity(0.9, ft.Colors.BLUE_GREY_800)
            }
    
    @staticmethod
    def get_dropdown_bgcolor(page):
        return ft.Colors.WHITE if page.theme_mode == "light" else ft.Colors.BLUE_GREY_800
    
    @staticmethod
    def get_textfield_bgcolor(page):
        return ft.Colors.WHITE if page.theme_mode == "light" else ft.Colors.BLUE_GREY_900
    
    @staticmethod
    def get_container_bgcolor(page, color_light, color_dark):
        return color_light if page.theme_mode == "light" else color_dark
    
    @staticmethod
    def get_border_color(page, base_color):
        if page.theme_mode == "light":
            return base_color
        else:
            return ft.Colors.with_opacity(0.6, base_color)
    
    @staticmethod
    def get_text_color(page):
        return ft.Colors.BLACK87 if page.theme_mode == "light" else ft.Colors.WHITE70
    
    @staticmethod
    def get_history_text_color(page):
        return ft.Colors.BLACK87 if page.theme_mode == "light" else ft.Colors.WHITE70
        B·ªï sung handler ch·ª©c nƒÉng d·ªãch + file vƒÉn b·∫£n v√† h√¨nh ·∫£nh
class TranslationHandler:
    """X·ª≠ l√Ω c√°c ch·ª©c nƒÉng d·ªãch thu·∫≠t"""
    
    def __init__(self, app_state: AppState):
        self.app_state = app_state
    
    def do_translate(self, e, page, input_text, output_text, src_lang, dst_lang,
                    domain_dd, use_context, translate_btn, loading_ring, prog,
                    history_container, last_history):
        """X·ª≠ l√Ω d·ªãch th·ªß c√¥ng"""
        text = (input_text.value or "").strip()
        if not text:
            page.snack_bar.content.value = "‚ö† Vui l√≤ng nh·∫≠p n·ªôi dung"
            page.snack_bar.open = True
            page.update()
            return

        src_code = _lang_code(src_lang.value)
        dst_code = _lang_code(dst_lang.value)
        domain = domain_dd.value if use_context.value else None

        # Khi b·∫Øt ƒë·∫ßu d·ªãch
        translate_btn.text = "‚è≥ ƒêang d·ªãch..."
        translate_btn.disabled = True
        loading_ring.visible = True
        prog.visible = True
        page.update()

        def worker():
            try:
                # Progress steps cho manual translate
                prog.value = 0.2
                page.update()
                
                result = translate_text(text, src_code, dst_code, domain)
                
                prog.value = 0.9
                page.update()
            except Exception as ex:
                result = f"[L·ªói] {ex}"
            
            try:
                add_history(src_code, dst_code, text, result, domain)
            except:
                pass  # Tr√°nh l·ªói khi l∆∞u l·ªãch s·ª≠
            
            # C·∫≠p nh·∫≠t l·ªãch s·ª≠ n·∫øu ƒëang hi·ªÉn th·ªã
            if history_container.visible:
                self._update_history_display(last_history, page)
            
            # Khi ho√†n t·∫•t ‚Üí tr·∫£ l·∫°i tr·∫°ng th√°i n√∫t ban ƒë·∫ßu
            output_text.value = result
            translate_btn.text = "D·ªãch"
            translate_btn.disabled = False
            loading_ring.visible = False
            prog.visible = False
            page.update()

        page.run_thread(worker)
    
    def _update_history_display(self, last_history, page):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã l·ªãch s·ª≠"""
        items = get_history()
        if items:
            recent_items = items[:5] if len(items) >= 5 else items
            history_text = ""
            
            for i, (src, dst, text_in, text_out, ctx, created) in enumerate(recent_items, 1):
                history_text += f"üìÖ {created} | {src} ‚Üí {dst}\n"
                history_text += f"üìù ƒê·∫ßu v√†o: {text_in[:50]}{'...' if len(text_in) > 50 else ''}\n"
                history_text += f"‚úÖ K·∫øt qu·∫£: {text_out[:50]}{'...' if len(text_out) > 50 else ''}\n"
                if ctx:
                    history_text += f"üè∑ Ng·ªØ c·∫£nh: {ctx}\n"
                history_text += "‚îÄ" * 50 + "\n\n"
last_history.value = history_text.strip()
            last_history.color = ThemeHandler.get_history_text_color(page)


class FileHandler:
    """X·ª≠ l√Ω c√°c ch·ª©c nƒÉng file"""
    
    @staticmethod
    def on_pick_txt(e: ft.FilePickerResultEvent, input_text, page):
        """X·ª≠ l√Ω khi ch·ªçn file text"""
        if e.files:
            p = e.files[0].path
            try:
                if p.endswith(".docx"):
                    doc = Document(p)
                    input_text.value = "\n".join([para.text for para in doc.paragraphs])
                else:
                    with open(p, "r", encoding="utf-8", errors="ignore") as rf:
                        input_text.value = rf.read()
            except Exception as ex:
                input_text.value = f"[L·ªói ƒë·ªçc file: {ex}]"
        page.update()
    
    @staticmethod
    def on_pick_image(e: ft.FilePickerResultEvent, input_text, img_btn, page,
                     src_lang, do_translate_callback):
        """X·ª≠ l√Ω khi ch·ªçn file ·∫£nh ƒë·ªÉ OCR"""
        if not e.files:
            return
            
        img_path = e.files[0].path
        
        # Hi·ªÉn th·ªã loading v√† update ngay
        img_btn.icon = ft.Icons.HOURGLASS_EMPTY
        img_btn.tooltip = "üîÑ ƒêang x·ª≠ l√Ω..."
        page.update()
        
        def process_ocr():
            try:
                if not PIL_AVAILABLE:
                    raise ImportError("PIL kh√¥ng c√≥ s·∫µn")
                
                if not TESSERACT_CMD:
                    raise FileNotFoundError("Kh√¥ng t√¨m th·∫•y Tesseract OCR")
                
                # M·ªü ·∫£nh v·ªõi optimization
                img = Image.open(img_path)
                
                # T·ªëi ∆∞u k√≠ch th∆∞·ªõc ·∫£nh cho t·ªëc ƒë·ªô
                width, height = img.size
                
                # Ch·ªâ resize n·∫øu ·∫£nh qu√° nh·ªè ho·∫∑c qu√° l·ªõn
                if width < 600 or height < 600:
                    scale = min(800/width, 800/height, 2.0)
                    new_size = (int(width * scale), int(height * scale))
                    img = img.resize(new_size, Image.Resampling.BILINEAR)
                elif width > 2000 or height > 2000:
                    scale = min(1500/width, 1500/height)
                    new_size = (int(width * scale), int(height * scale))
                    img = img.resize(new_size, Image.Resampling.BILINEAR)
                
                # T·ªëi ∆∞u ng√¥n ng·ªØ OCR
                src_code = _lang_code(src_lang.value)
                if src_code == "vi":
                    ocr_lang = "vie"
                elif src_code == "en":
                    ocr_lang = "eng"
                elif src_code == "ja":
                    ocr_lang = "jpn"
                elif src_code == "zh" or src_code == "zh-tw":
                    ocr_lang = "chi_sim"
                elif src_code == "ko":
                    ocr_lang = "kor"
                else:
ocr_lang = "vie+eng"
                
                # Config OCR t·ªëi ∆∞u cho t·ªëc ƒë·ªô
                config = "--oem 3 --psm 6"
                
                # Th·ª±c hi·ªán OCR
                text = pytesseract.image_to_string(img, lang=ocr_lang, config=config)
                
                # L√†m s·∫°ch text
                text = text.strip()
                if text:
                    text = '\n'.join(line.strip() for line in text.split('\n') if line.strip())
                    input_text.value = text
                else:
                    input_text.value = ""
                    
            except Exception as ex:
                input_text.value = ""
            finally:
                # Reset button state
                img_btn.icon = ft.Icons.IMAGE
                img_btn.tooltip = "üñºÔ∏è Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh"
                page.update()
        
        # Ch·∫°y OCR trong thread ri√™ng
        threading.Thread(target=process_ocr, daemon=True).start()
class AudioHandler:
    """X·ª≠ l√Ω c√°c ch·ª©c nƒÉng √¢m thanh"""
    
    def __init__(self, app_state: AppState):
        self.app_state = app_state
    
    def do_speak(self, e, page, output_text, speak_btn, dst_lang):
        """X·ª≠ l√Ω text-to-speech"""
        # N·∫øu ƒëang ph√°t, th√¨ d·ª´ng l·∫°i
        if self.app_state.speaking or is_speaking():
            stop_speaking()
            self.app_state.speaking = False
            speak_btn.icon = ft.Icons.VOLUME_UP
            speak_btn.tooltip = "üîä ƒê·ªçc k·∫øt qu·∫£ d·ªãch"
            page.snack_bar.content.value = "‚è∏ ƒê√£ d·ª´ng ƒë·ªçc"
            page.snack_bar.open = True
            page.update()
            return
        
        # N·∫øu kh√¥ng c√≥ text th√¨ kh√¥ng l√†m g√¨
        if not output_text.value or not output_text.value.strip():
            page.snack_bar.content.value = "‚ö† Ch∆∞a c√≥ k·∫øt qu·∫£ d·ªãch ƒë·ªÉ ƒë·ªçc"
            page.snack_bar.open = True
            page.update()
            return
            
        # B·∫Øt ƒë·∫ßu ph√°t
        try:
            self.app_state.speaking = True
            speak_btn.icon = ft.Icons.STOP
            speak_btn.tooltip = "‚è∏Ô∏è D·ª´ng ƒë·ªçc"
            page.update()
            
            def speak_thread():
                try:
                    speak(output_text.value, _lang_code(dst_lang.value))
                except Exception as ex:
                    page.snack_bar.content.value = f"üîä TTS l·ªói: {ex}"
                    page.snack_bar.open = True
                finally:
                    self.app_state.speaking = False
                    speak_btn.icon = ft.Icons.VOLUME_UP
                    speak_btn.tooltip = "üîä ƒê·ªçc k·∫øt qu·∫£ d·ªãch"
                    page.update()
            
            threading.Thread(target=speak_thread, daemon=True).start()
            
        except Exception as ex:
            self.app_state.speaking = False
            speak_btn.icon = ft.Icons.VOLUME_UP
            speak_btn.tooltip = "üîä ƒê·ªçc k·∫øt qu·∫£ d·ªãch"
            page.snack_bar.content.value = f"üîä TTS l·ªói: {ex}"
            page.snack_bar.open = True
            page.update()
    
    def stop_recording(self, record_spinner, mic_btn, page):
        """D·ª´ng ghi √¢m v√† reset UI"""
        self.app_state.recording = False
        self.app_state.force_stop_recording = False
        if self.app_state.recording_thread:
            self.app_state.recording_thread = None
        record_spinner.visible = False
        mic_btn.icon_color = None
        mic_btn.tooltip = "üé§ Ghi √¢m ƒë·ªÉ d·ªãch"
        page.update()
    
    def do_record(self, e, page, input_text, mic_btn, record_spinner, src_lang):
        """X·ª≠ l√Ω speech-to-text v·ªõi c√°c c·∫£i ti·∫øn"""
        if not self.app_state.recording:
            # B·∫Øt ƒë·∫ßu ghi √¢m
            self.app_state.recording = True
            record_spinner.visible = True
mic_btn.icon_color = "red"
            mic_btn.tooltip = "üõë Nh·∫•n l·∫°i ƒë·ªÉ d·ª´ng"
            page.snack_bar.content.value = "üé§ Chu·∫©n b·ªã ghi √¢m... S·∫Ω t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu khi c√≥ gi·ªçng n√≥i!"
            page.snack_bar.open = True
            page.update()
            
            def record_worker():
                recorded_text = None  # Bi·∫øn l∆∞u vƒÉn b·∫£n ƒë√£ ghi √¢m
                try:
                    import speech_recognition as sr
                    
                    # Kh·ªüi t·∫°o recognizer v·ªõi c·∫•u h√¨nh ƒë·ªÉ b·∫Øt t·ª´ ƒë·∫ßu ti√™n
                    r = sr.Recognizer()
                    
                    # C√†i ƒë·∫∑t ƒë·ªÉ b·∫Øt ƒë∆∞·ª£c t·ª´ ƒë·∫ßu ti√™n
                    r.pause_threshold = 0.8  # Th·ªùi gian im l·∫∑ng ƒë·ªÉ k·∫øt th√∫c
                    r.phrase_time_limit = None  # Kh√¥ng gi·ªõi h·∫°n th·ªùi gian n√≥i
                    r.dynamic_energy_threshold = False  # T·∫Øt auto-adjust ƒë·ªÉ c√≥ control t·ªët h∆°n
                    r.energy_threshold = 100  # Ng∆∞·ª°ng th·∫•p ƒë·ªÉ b·∫Øt gi·ªçng n√≥i nh·ªè
                    r.non_speaking_duration = 0.2  # Th·ªùi gian im l·∫∑ng tr∆∞·ªõc khi recording
                    
                    with sr.Microphone() as source:
                        # ƒêi·ªÅu ch·ªânh nhanh
                        page.snack_bar.content.value = "üîß Chu·∫©n b·ªã micro..."
                        page.snack_bar.open = True
                        page.update()
                        
                        # L·∫•y m·∫´u nhi·ªÖu n·ªÅn ng·∫Øn g·ªçn
                        r.adjust_for_ambient_noise(source, duration=0.2)
                        
                        # L∆∞u energy threshold sau khi ƒëi·ªÅu ch·ªânh
                        baseline_energy = r.energy_threshold
                        # ƒê·∫∑t threshold th·∫•p h∆°n baseline ƒë·ªÉ sensitive h∆°n
                        r.energy_threshold = max(50, baseline_energy * 0.3)
                        
                        if not self.app_state.recording:
                            return
                        
                        page.snack_bar.content.value = "üé§ N√ìI NGAY B√ÇY GI·ªú! ƒêang l·∫Øng nghe..."
                        page.snack_bar.open = True
                        page.update()
                        
                        # Chi·∫øn l∆∞·ª£c m·ªõi: Listen v·ªõi timeout r·∫•t ng·∫Øn ƒë·ªÉ b·∫Øt ƒë·∫ßu ngay
                        try:
                            # Th·ª≠ b·∫Øt audio ngay l·∫≠p t·ª©c
                            audio = r.listen(
                                source, 
                                timeout=1,  # B·∫Øt ƒë·∫ßu nghe trong 1 gi√¢y
                                phrase_time_limit=20  # Cho ph√©p n√≥i t·ªëi ƒëa 20 gi√¢y
                            )
                        except sr.WaitTimeoutError:
                            # N·∫øu timeout, th·ª≠ l·∫ßn n·ªØa v·ªõi threshold th·∫•p h∆°n
                            r.energy_threshold = max(30, r.energy_threshold * 0.5)
page.snack_bar.content.value = "üé§ ƒêang ch·ªù gi·ªçng n√≥i... H√£y n√≥i to h∆°n!"
                            page.snack_bar.open = True
                            page.update()
                            
                            audio = r.listen(
                                source,
                                timeout=10,
                                phrase_time_limit=20
                            )
                    
                    # Ki·ªÉm tra tr·∫°ng th√°i ghi √¢m tr∆∞·ªõc khi x·ª≠ l√Ω
                    if not self.app_state.recording:
                        # N·∫øu b·ªã d·ª´ng th·ªß c√¥ng, v·∫´n c·ªë g·∫Øng x·ª≠ l√Ω audio ƒë√£ ghi
                        pass
                    
                    page.snack_bar.content.value = "üîÑ ƒêang x·ª≠ l√Ω √¢m thanh..."
                    page.snack_bar.open = True
                    page.update()
                    
                    # X√°c ƒë·ªãnh ng√¥n ng·ªØ v·ªõi ∆∞u ti√™n ti·∫øng Vi·ªát
                    src_code = _lang_code(src_lang.value)
                    if src_code == "auto":
                        src_code = "vi"  # M·∫∑c ƒë·ªãnh ti·∫øng Vi·ªát cho ng∆∞·ªùi Vi·ªát Nam
                    
                    # Mapping m·ªü r·ªông cho Google Speech Recognition
                    lang_map = {
                        "vi": "vi-VN", 
                        "en": "en-US", 
                        "zh": "zh-CN",
                        "zh-tw": "zh-TW",
                        "ja": "ja-JP", 
                        "ko": "ko-KR", 
                        "fr": "fr-FR",
                        "de": "de-DE", 
                        "es": "es-ES", 
                        "it": "it-IT",
                        "pt": "pt-BR", 
                        "ru": "ru-RU", 
                        "ar": "ar-SA",
                        "th": "th-TH",
                        "hi": "hi-IN"
                    }
                    
                    recognition_lang = lang_map.get(src_code, "vi-VN")
                    
                    # Th·ª≠ nh·∫≠n d·∫°ng v·ªõi ∆∞u ti√™n ng√¥n ng·ªØ ƒë∆∞·ª£c ch·ªçn
                    recognition_attempts = []
                    
                    # ∆Øu ti√™n 1: Ng√¥n ng·ªØ ƒë∆∞·ª£c ch·ªçn c·ª• th·ªÉ
                    if src_code != "auto":
                        recognition_attempts.append(recognition_lang)
                    
                    # ∆Øu ti√™n 2: N·∫øu auto detect, th·ª≠ ti·∫øng Vi·ªát tr∆∞·ªõc (cho ng∆∞·ªùi Vi·ªát)
                    if src_code == "auto":
                        recognition_attempts.append("vi-VN")
                        recognition_attempts.append("en-US")
                    
                    # ∆Øu ti√™n 3: Fallback cho c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
                    if src_code == "vi" and "en-US" not in recognition_attempts:
                        recognition_attempts.append("en-US")  # Fallback cho ti·∫øng Vi·ªát
elif src_code == "en" and "vi-VN" not in recognition_attempts:
                        recognition_attempts.append("vi-VN")  # Fallback cho ti·∫øng Anh
                    
                    # Nh·∫≠n d·∫°ng gi·ªçng n√≥i v·ªõi ∆∞u ti√™n ti·∫øng Vi·ªát
                    best_confidence = 0
                    best_text = None
                    best_lang = None
                    
                    for attempt_lang in recognition_attempts:
                        try:
                            # S·ª≠ d·ª•ng show_all=True ƒë·ªÉ c√≥ nhi·ªÅu t√πy ch·ªçn
                            alternatives = r.recognize_google(audio, language=attempt_lang, show_all=True)
                            
                            if alternatives and "alternative" in alternatives:
                                for alt in alternatives["alternative"]:
                                    current_confidence = alt.get("confidence", 0.5)  # Default confidence
                                    current_text = alt["transcript"]
                                    
                                    # Bonus ƒëi·ªÉm cho ng√¥n ng·ªØ ƒë∆∞·ª£c ch·ªçn c·ª• th·ªÉ
                                    if attempt_lang == recognition_lang and src_code != "auto":
                                        # ∆Øu ti√™n m·∫°nh cho ng√¥n ng·ªØ ƒë∆∞·ª£c ch·ªçn c·ª• th·ªÉ
                                        current_confidence += 0.4
                                    elif attempt_lang == "vi-VN" and src_code == "auto":
                                        # Ki·ªÉm tra xem c√≥ t·ª´ ti·∫øng Vi·ªát kh√¥ng khi auto detect
                                        vietnamese_words = ["l√†", "c·ªßa", "v√†", "c√≥", "t√¥i", "b·∫°n", "n√†y", "ƒë√≥", "l·ªõp", "h·ªçc", "vi·ªát", "nam", "ƒëi", "ƒë·∫øn", "v·ªõi", "trong"]
                                        text_lower = current_text.lower()
                                        has_vietnamese = any(word in text_lower for word in vietnamese_words)
                                        
                                        if has_vietnamese:
                                            current_confidence += 0.3  # Bonus cho ti·∫øng Vi·ªát c√≥ t·ª´ Vi·ªát
                                        else:
                                            current_confidence += 0.1  # Bonus nh·ªè cho ti·∫øng Vi·ªát
                                    elif attempt_lang == "en-US" and src_code == "auto":
                                        # Ki·ªÉm tra xem c√≥ t·ª´ ti·∫øng Anh kh√¥ng khi auto detect  
                                        english_words = ["the", "and", "or", "but", "in", "on", "at", "to", "for", "of", "with", "by"]
                                        text_lower = current_text.lower()
                                        has_english = any(word in text_lower for word in english_words)
                                        
                                        if has_english:
current_confidence += 0.2  # Bonus cho ti·∫øng Anh c√≥ t·ª´ Anh
                                    
                                    # Ch·ªçn k·∫øt qu·∫£ t·ªët nh·∫•t
                                    if current_confidence > best_confidence:
                                        best_confidence = current_confidence
                                        best_text = current_text
                                        best_lang = attempt_lang
                            else:
                                # Fallback: th·ª≠ ph∆∞∆°ng th·ª©c c≈©
                                text = r.recognize_google(audio, language=attempt_lang)
                                if text.strip():
                                    confidence = 0.7 if attempt_lang == "vi-VN" else 0.5
                                    if confidence > best_confidence:
                                        best_confidence = confidence
                                        best_text = text
                                        best_lang = attempt_lang
                                    
                        except sr.UnknownValueError:
                            continue  # Th·ª≠ ng√¥n ng·ªØ ti·∫øp theo
                        except sr.RequestError:
                            continue  # Th·ª≠ ng√¥n ng·ªØ ti·∫øp theo
                        except Exception:
                            continue  # Th·ª≠ ng√¥n ng·ªØ ti·∫øp theo
                    
                    # S·ª≠ d·ª•ng k·∫øt qu·∫£ t·ªët nh·∫•t
                    if best_text and best_confidence > 0.4:  # Ng∆∞·ª°ng th·∫•p h∆°n
                        recorded_text = best_text
                    
                    # X·ª≠ l√Ω k·∫øt qu·∫£
                    if recorded_text and recorded_text.strip():
                        # L√†m s·∫°ch vƒÉn b·∫£n
                        recorded_text = recorded_text.strip()
                        
                        # S·ª≠a c√°c t·ª´ th∆∞·ªùng b·ªã nh·∫ßm l·∫´n khi n√≥i ti·∫øng Vi·ªát
                        if best_lang == "vi-VN" or src_code == "vi":
                            # Dictionary s·ª≠a l·ªói ph·ªï bi·∫øn
                            vietnamese_corrections = {
                                "love": "l·ªõp",
                                "Love": "L·ªõp", 
                                "class": "l·ªõp",
                                "Class": "L·ªõp",
                                "home": "h√¥m",
                                "Home": "H√¥m",
                                "time": "th·ªùi",
                                "Time": "Th·ªùi",
                                "name": "nƒÉm",
                                "Name": "NƒÉm",
                                "house": "h·ªçc",
                                "House": "H·ªçc",
                                "school": "tr∆∞·ªùng",
                                "School": "Tr∆∞·ªùng",
                                "book": "b∆∞·ªõc",
                                "Book": "B∆∞·ªõc",
"water": "vi·ªát",
                                "Water": "Vi·ªát",
                                "come": "g·ªçi",
                                "Come": "G·ªçi",
                                "go": "ƒëi",
                                "Go": "ƒêi"
                            }
                            
                            # Thay th·∫ø t·ª´ng t·ª´
                            words = recorded_text.split()
                            corrected_words = []
                            for word in words:
                                # Lo·∫°i b·ªè d·∫•u c√¢u ƒë·ªÉ check
                                clean_word = word.strip(".,!?;:")
                                punctuation = word[len(clean_word):]
                                
                                if clean_word in vietnamese_corrections:
                                    corrected_words.append(vietnamese_corrections[clean_word] + punctuation)
                                else:
                                    corrected_words.append(word)
                            
                            recorded_text = " ".join(corrected_words)
                        
                        # C·∫≠p nh·∫≠t UI
                        input_text.value = recorded_text
                        confidence_text = f" (tin c·∫≠y: {best_confidence:.1%})" if best_confidence > 0 else ""
                        page.snack_bar.content.value = f"‚úÖ {best_lang}: {recorded_text[:35]}{'...' if len(recorded_text) > 35 else ''}{confidence_text}"
                    else:
                        page.snack_bar.content.value = "‚ö† Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng gi·ªçng n√≥i. Th·ª≠ n√≥i r√µ h∆°n v√† g·∫ßn micro."
                        
                except sr.WaitTimeoutError:
                    page.snack_bar.content.value = "‚è∞ Kh√¥ng nghe th·∫•y gi·ªçng n√≥i. Th·ª≠ n√≥i to h∆°n ho·∫∑c g·∫ßn micro h∆°n!"
                except Exception as ex:
                    page.snack_bar.content.value = f"‚ùå L·ªói ghi √¢m: {str(ex)[:50]}..."
                
                finally:
                    # Reset tr·∫°ng th√°i UI - LU√îN th·ª±c hi·ªán
                    self.stop_recording(record_spinner, mic_btn, page)
                    page.snack_bar.open = True
                    page.update()
            
            # L∆∞u reference thread v√† ch·∫°y
            self.app_state.recording_thread = page.run_thread(record_worker)
            
        else:
            # D·ª´ng ghi √¢m th·ªß c√¥ng - vƒÉn b·∫£n v·∫´n ƒë∆∞·ª£c x·ª≠ l√Ω
            self.app_state.recording = False
            page.snack_bar.content.value = "‚èπÔ∏è ƒêang x·ª≠ l√Ω √¢m thanh ƒë√£ ghi..."
            page.snack_bar.open = True
            page.update()


